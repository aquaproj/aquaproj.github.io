"use strict";(self.webpackChunkaqua_docusaurus=self.webpackChunkaqua_docusaurus||[]).push([[5252],{3905:(e,a,n)=>{n.d(a,{Zo:()=>u,kt:()=>g});var t=n(7294);function i(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){i(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,t,i=function(e,a){if(null==e)return{};var n,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(i[n]=e[n]);return i}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=t.createContext({}),p=function(e){var a=t.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},u=function(e){var a=p(e.components);return t.createElement(s.Provider,{value:a},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),m=i,g=c["".concat(s,".").concat(m)]||c[m]||d[m]||r;return n?t.createElement(g,l(l({ref:a},u),{},{components:n})):t.createElement(g,l({ref:a},u))}));function g(e,a){var n=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=m;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o[c]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5950:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var t=n(7462),i=(n(7294),n(3905));const r={sidebar_position:700},l="Lazy Install",o={unversionedId:"reference/lazy-install",id:"reference/lazy-install",title:"Lazy Install",description:"Lazy Install is a feature that aqua installs a tool when the tool is executed if the tool version isn't installed yet.",source:"@site/docs/reference/lazy-install.md",sourceDirName:"reference",slug:"/reference/lazy-install",permalink:"/docs/reference/lazy-install",draft:!1,editUrl:"https://github.com/aquaproj/aquaproj.github.io/edit/main/docs/reference/lazy-install.md",tags:[],version:"current",sidebarPosition:700,frontMatter:{sidebar_position:700},sidebar:"tutorialSidebar",previous:{title:"Use aqua combined with other version manager such as asdf",permalink:"/docs/reference/use-aqua-with-other-tools"},next:{title:"aqua doesn't support installing aqua",permalink:"/docs/reference/aqua-cant-manage-aqua"}},s={},p=[{value:"Benefit",id:"benefit",level:2},{value:"Disable Lazy Install",id:"disable-lazy-install",level:2},{value:"How does Lazy Install work?",id:"how-does-lazy-install-work",level:2}],u={toc:p},c="wrapper";function d(e){let{components:a,...n}=e;return(0,i.kt)(c,(0,t.Z)({},u,n,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"lazy-install"},"Lazy Install"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Lazy Install")," is a feature that aqua installs a tool when the tool is executed if the tool version isn't installed yet."),(0,i.kt)("p",null,"The following example shows GitHub CLI is installed when ",(0,i.kt)("inlineCode",{parentName:"p"},"gh version")," is executed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"$ gh version\nINFO[0000] download and unarchive the package            aqua_version=1.19.2 package_name=cli/cli package_version=v2.1.0 program=aqua registry=standard\ngh version 2.1.0 (2021-10-14)\nhttps://github.com/cli/cli/releases/tag/v2.1.0\n")),(0,i.kt)("h2",{id:"benefit"},"Benefit"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"You can install tools that really needed"),(0,i.kt)("li",{parentName:"ul"},"You don't have to run ",(0,i.kt)("inlineCode",{parentName:"li"},"aqua i")," to update packages"),(0,i.kt)("li",{parentName:"ul"},"You can ensure executed tool versions")),(0,i.kt)("h2",{id:"disable-lazy-install"},"Disable Lazy Install"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/orgs/aquaproj/discussions/2058"},"#2058")," aqua >= v2.9.0"),(0,i.kt)("p",null,"Lazy Install is enabled by default, but you can disable it with the environment variable ",(0,i.kt)("inlineCode",{parentName:"p"},"AQUA_DISABLE_LAZY_INSTALL"),"."),(0,i.kt)("p",null,"e.g."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"export AQUA_DISABLE_LAZY_INSTALL=true\n")),(0,i.kt)("p",null,"If Lazy Install is disabled, the command would fail if the package isn't installed in advance."),(0,i.kt)("p",null,"e.g."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},'$ tfcmt -v\nFATA[0000] aqua failed                                   aqua_version= doc="https://aquaproj.github.io/docs/reference/codes/006" env=darwin/arm64 error="the executable file isn\'t installed yet. Lazy Install is disabled" exe_name=tfcmt package=suzuki-shunsuke/tfcmt package_version=v1.0.0 program=aqua\n')),(0,i.kt)("p",null,"Disabling Lazy Install is useful to improve the security and keep the governance. You can prevent malicious commands from being installed and executed via Lazy Install. And you can also prevent aqua.yaml from being overwritten."),(0,i.kt)("p",null,"This is especially useful for CI of Monorepo."),(0,i.kt)("p",null,"The purpose is same with aqua's Policy, but disabling Lazy Install is simpler than Policy."),(0,i.kt)("h2",{id:"how-does-lazy-install-work"},"How does Lazy Install work?"),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"On Windows, ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/aquaproj/aqua-proxy"},"aqua-proxy")," and symbolic links aren't used.\nPlease see ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/windows-support#create-bat-files-and-shell-scripts-instead-of-symbolic-links-and-aqua-proxy"},"here"))),(0,i.kt)("p",null,"In this document we describe how the Lazy Install works.\nThe Lazy Install is the aqua's characteristic feature, and maybe you feel it like magic."),(0,i.kt)("p",null,"By ",(0,i.kt)("inlineCode",{parentName:"p"},"aqua i"),", aqua installs ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/aquaproj/aqua-proxy"},"aqua-proxy")," regardless the aqua's configuration."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$AQUA_ROOT_DIR/\n  bin/\n    aqua-proxy -> ../pkgs/github_release/github.com/aquaproj/aqua-proxy/v0.2.0/aqua-proxy_darwin_amd64.tar.gz/aqua-proxy\n  pkgs/\n    github_release/github.com/aquaproj/aqua-proxy/v0.2.0/aqua-proxy_darwin_amd64.tar.gz/aqua-proxy\n")),(0,i.kt)("p",null,"And by ",(0,i.kt)("inlineCode",{parentName:"p"},"aqua i"),", aqua reads the configuration file and creates symbolic links to aqua-proxy in ",(0,i.kt)("inlineCode",{parentName:"p"},"$AQUA_ROOT_DIR/bin"),".\nThe symbolic link name is the package's file name."),(0,i.kt)("p",null,"For example, by the following configuration symbolic links ",(0,i.kt)("inlineCode",{parentName:"p"},"go")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"gofmt")," are created."),(0,i.kt)("p",null,"aqua.yaml"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'registries:\n- name: local\n  type: local\n  path: registry.yaml\n\npackages:\n- name: go\n  registry: local\n  version: "1.17"\n')),(0,i.kt)("p",null,"registry.yaml"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"packages:\n- name: go\n  type: http\n  url: https://golang.org/dl/go{{.Version}}.{{.OS}}-{{.Arch}}.tar.gz\n  files:\n  - name: go # the symbolic `go` is created\n    src: go/bin/go\n  - name: gofmt # the symbolic `gofmt` is created\n    src: go/bin/gofmt\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$AQUA_ROOT_DIR/\n  bin/\n    go -> aqua-proxy\n    gofmt -> aqua-proxy\n")),(0,i.kt)("p",null,"Add ",(0,i.kt)("inlineCode",{parentName:"p"},"$AQUA_ROOT_DIR/bin")," to the environment variable ",(0,i.kt)("inlineCode",{parentName:"p"},"PATH"),".\nWhen ",(0,i.kt)("inlineCode",{parentName:"p"},"go version")," is executed, ",(0,i.kt)("inlineCode",{parentName:"p"},"$AQUA_ROOT_DIR/bin/go")," is a symbolic link to aqua-proxy so aqua-proxy is executed.\nThen aqua-proxy executes ",(0,i.kt)("inlineCode",{parentName:"p"},"aqua exec")," passing the program name and command line arguments.\nIn case of ",(0,i.kt)("inlineCode",{parentName:"p"},"go version"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"aqua exec -- go version")," is executed.\n",(0,i.kt)("inlineCode",{parentName:"p"},"aqua exec")," reads the configuration file and finds the package which includes ",(0,i.kt)("inlineCode",{parentName:"p"},"go")," and gets the package versions.\naqua installs the package version in ",(0,i.kt)("inlineCode",{parentName:"p"},"$AQUA_ROOT_DIR/pkgs")," if it isn't installed yet\nThen aqua executes the command ",(0,i.kt)("inlineCode",{parentName:"p"},"$AQUA_ROOT_DIR/pkgs/http/golang.org/dl/go1.17.darwin-amd64.tar.gz/go/bin/go version"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"$AQUA_ROOT_DIR/bin")," is shared by every ",(0,i.kt)("inlineCode",{parentName:"p"},"aqua.yaml"),", so maybe in ",(0,i.kt)("inlineCode",{parentName:"p"},"aqua exec")," the package isn't found.\nPlease comment out the package ",(0,i.kt)("inlineCode",{parentName:"p"},"go")," and execute ",(0,i.kt)("inlineCode",{parentName:"p"},"go version")," again."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'registries:\n- name: local\n  type: local\n  path: registry.yaml\n\npackages:\n# - name: go\n#   registry: local\n#   version: "1.17"\n')),(0,i.kt)("p",null,"If the package isn't found in the configuration files,\naqua finds the command from the environment variable ",(0,i.kt)("inlineCode",{parentName:"p"},"PATH"),".\nFor example, if the ",(0,i.kt)("inlineCode",{parentName:"p"},"PATH")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"$AQUA_ROOT_DIR/bin:/usr/local/bin:/bin"),", aqua checks the following files."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"$AQUA_ROOT_DIR/bin/go")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"/usr/local/bin/go")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"/bin/go"))),(0,i.kt)("p",null,"To prevent the infinite loop, aqua ignores the symbolic to aqua-proxy.\n",(0,i.kt)("inlineCode",{parentName:"p"},"$AQUA_ROOT_DIR/bin/go")," is a symbolic link to aqua-proxy, so this is ignored.\nIf go is installed in ",(0,i.kt)("inlineCode",{parentName:"p"},"/usr/local/bin/go"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"/usr/local/bin/go version")," is executed.\nIf ",(0,i.kt)("inlineCode",{parentName:"p"},"go")," isn't found, aqua exits with non zero exit code."))}d.isMDXComponent=!0}}]);