"use strict";(self.webpackChunkaqua_docusaurus=self.webpackChunkaqua_docusaurus||[]).push([[4833],{1251:(a,e,n)=>{n.r(e),n.d(e,{assets:()=>u,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>r});var t=n(8168),i=(n(6540),n(5680));const o={sidebar_position:400},l="Usage",s={unversionedId:"reference/usage",id:"reference/usage",title:"Usage",description:"aqua init",source:"@site/docs/reference/usage.md",sourceDirName:"reference",slug:"/reference/usage",permalink:"/docs/reference/usage",draft:!1,editUrl:"https://github.com/aquaproj/aquaproj.github.io/edit/main/docs/reference/usage.md",tags:[],version:"current",sidebarPosition:400,frontMatter:{sidebar_position:400},sidebar:"tutorialSidebar",previous:{title:"Registry",permalink:"/docs/reference/registry"},next:{title:"Windows Support",permalink:"/docs/reference/windows-support"}},u={},r=[{value:"aqua init",id:"aqua-init",level:2},{value:"aqua install",id:"aqua-install",level:2},{value:"aqua generate",id:"aqua-generate",level:2},{value:"aqua update-aqua",id:"aqua-update-aqua",level:2},{value:"aqua update-checksum",id:"aqua-update-checksum",level:2},{value:"aqua update",id:"aqua-update",level:2},{value:"aqua which",id:"aqua-which",level:2},{value:"aqua info",id:"aqua-info",level:2},{value:"aqua remove",id:"aqua-remove",level:2},{value:"aqua vacuum",id:"aqua-vacuum",level:2},{value:"aqua token",id:"aqua-token",level:2},{value:"token set",id:"token-set",level:3},{value:"token remove",id:"token-remove",level:3},{value:"aqua cp",id:"aqua-cp",level:2},{value:"aqua policy",id:"aqua-policy",level:2},{value:"policy allow",id:"policy-allow",level:3},{value:"policy deny",id:"policy-deny",level:3},{value:"policy init",id:"policy-init",level:3},{value:"aqua init-policy",id:"aqua-init-policy",level:2},{value:"aqua exec",id:"aqua-exec",level:2},{value:"aqua list",id:"aqua-list",level:2},{value:"aqua generate-registry",id:"aqua-generate-registry",level:2},{value:"aqua root-dir",id:"aqua-root-dir",level:2},{value:"aqua version",id:"aqua-version",level:2},{value:"aqua completion",id:"aqua-completion",level:2}],c={toc:r},p="wrapper";function d({components:a,...e}){return(0,i.yg)(p,(0,t.A)({},c,e,{components:a,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"usage"},"Usage"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"$ aqua --help\nNAME:\n   aqua - Version Manager of CLI. https://aquaproj.github.io/\n\nUSAGE:\n   aqua [global options] [command [command options]]\n\nVERSION:\n   2.53.8\n\nCOMMANDS:\n   init                   Create a configuration file if it doesn't exist\n   install, i             Install tools\n   generate, g            Search packages in registries and output the configuration interactively\n   update-aqua, upa       Update aqua\n   update-checksum, upc   Create or Update aqua-checksums.json\n   update, up             Update registries and packages\n   which                  Output the absolute file path of the given command\n   info                   Show information\n   remove, rm             Uninstall packages\n   vacuum                 Remove unused installed packages\n   token                  Manage GitHub Access token\n   cp                     Copy executable files in a directory\n   policy                 Manage Policy\n   init-policy            [Deprecated] Create a policy file if it doesn't exist\n   exec                   Execute tool\n   list                   List packages in Registries\n   generate-registry, gr  Generate a registry's package configuration\n   root-dir               Output the aqua root directory (AQUA_ROOT_DIR)\n   version                Show version\n   help, h                Shows a list of commands or help for one command\n   completion             Output shell completion script for bash, zsh, fish, or Powershell\n\nGLOBAL OPTIONS:\n   --log-level string                     log level [$AQUA_LOG_LEVEL]\n   --config string, -c string             configuration file path [$AQUA_CONFIG]\n   --disable-cosign                       Disable Cosign verification (default: false) [$AQUA_DISABLE_COSIGN]\n   --disable-slsa                         Disable SLSA verification (default: false) [$AQUA_DISABLE_SLSA]\n   --disable-github-artifact-attestation  Disable GitHub Artifact Attestations verification (default: false) [$AQUA_DISABLE_GITHUB_ARTIFACT_ATTESTATION]\n   --trace string                         trace output file path\n   --cpu-profile string                   cpu profile output file path\n   --help, -h                             show help\n   --version, -v                          print the version\n")),(0,i.yg)("h2",{id:"aqua-init"},"aqua init"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},'$ aqua init --help\nNAME:\n   aqua init - Create a configuration file if it doesn\'t exist\n\nUSAGE:\n   aqua init [<created file path. The default value is "aqua.yaml">]\n\nDESCRIPTION:\n   Create a configuration file if it doesn\'t exist\n   e.g.\n   $ aqua init # create "aqua.yaml"\n   $ aqua init foo.yaml # create foo.yaml\n   $ aqua init -u # Replace "packages:" with "import_dir: imports"\n   $ aqua init -i <directory path> # Replace "packages:" with "import_dir: <directory path>"\n   $ aqua init -d # Create a directory "aqua" and create "aqua/aqua.yaml"\n\n\nOPTIONS:\n   --use-import-dir, -u            Use import_dir (default: false)\n   --import-dir string, -i string  import_dir\n   --create-dir, -d                Create a directory named aqua and create aqua.yaml in it (default: false)\n   --help, -h                      show help\n')),(0,i.yg)("h2",{id:"aqua-install"},"aqua install"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},'$ aqua install --help\nNAME:\n   aqua install - Install tools\n\nUSAGE:\n   aqua install\n\nDESCRIPTION:\n   Install tools according to the configuration files.\n\n   e.g.\n   $ aqua i\n\n   If you want to create only symbolic links and want to skip downloading package, please set "-l" option.\n\n   $ aqua i -l\n\n   By default aqua doesn\'t install packages in the global configuration.\n   If you want to install packages in the global configuration too,\n   please set "-a" option.\n\n   $ aqua i -a\n\n   You can filter installed packages with package tags.\n\n   e.g.\n   $ aqua i -t foo # Install only packages having a tag "foo"\n   $ aqua i --exclude-tags foo # Install only packages not having a tag "foo"\n\n\nOPTIONS:\n   --only-link, -l           create links but skip downloading packages (default: false)\n   --test                    This flag was deprecated and had no meaning from aqua v2.0.0. This flag will be removed in aqua v3.0.0. https://github.com/aquaproj/aqua/issues/1691 (default: false)\n   --all, -a                 install all aqua configuration packages (default: false)\n   --tags string, -t string  filter installed packages with tags\n   --exclude-tags string     exclude installed packages with tags\n   --help, -h                show help\n')),(0,i.yg)("h2",{id:"aqua-generate"},"aqua generate"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},'$ aqua generate --help\nNAME:\n   aqua generate - Search packages in registries and output the configuration interactively\n\nUSAGE:\n   aqua generate [<registry name>,<package name> ...]\n\nDESCRIPTION:\n   Search packages in registries and output the configuration interactively.\n\n   If no argument is passed, interactive fuzzy finder is launched.\n\n   $ aqua g\n\n     influxdata/influx-cli (standard) (influx)                     \u250c \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500\n     newrelic/newrelic-cli (standard) (newrelic)                   \u2502  cli/cli\n     pivotal-cf/pivnet-cli (standard) (pivnet)                     \u2502\n     scaleway/scaleway-cli (standard) (scw)                        \u2502  https://cli.github.com/\n     tfmigrator/cli (standard) (tfmigrator)                        \u2502  GitHub\u2019cs official command line tool\n     aws/copilot-cli (standard) (copilot)                          \u2502\n     codeclimate/test-reporter (standard)                          \u2502\n     create-go-app/cli (standard) (cgapp)                          \u2502\n     harness/drone-cli (standard) (drone)                          \u2502\n     sigstore/rekor (standard) (rekor-cli)                         \u2502\n     getsentry/sentry-cli (standard)                               \u2502\n     knative/client (standard) (kn)                                \u2502\n     rancher/cli (standard) (rancher)                              \u2502\n     tektoncd/cli (standard) (tkn)                                 \u2502\n     civo/cli (standard) (civo)                                    \u2502\n     dapr/cli (standard) (dapr)                                    \u2502\n     mongodb/mongocli (standard)                                   \u2502\n     openfaas/faas-cli (standard)                                  \u2502\n   > cli/cli (standard) (gh)                                       \u2502\n     48/380                                                        \u2502\n   > cli                                                           \u2514 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500\n\n   Please select the package you want to install, then the package configuration is outptted.\n   You can select multiple packages by tab key.\n   Please copy and paste the outputted configuration in the aqua configuration file.\n\n   $ aqua g # tfmigrator/cli is selected\n   - name: tfmigrator/cli@v0.2.1\n\n   You can update the configuration file directly with "-i" option.\n\n   $ aqua g -i\n\n   You can update an imported file with "-o" option.\n\n   $ aqua g -o aqua/pkgs.yaml\n\n   You can pass packages with positional arguments.\n\n   $ aqua g [<registry name>,<package name>[@<version>] ...]\n\n   $ aqua g standard,cli/cli standard,junegunn/fzf standard,suzuki-shunsuke/tfcmt@v3.0.0\n   - name: cli/cli@v2.2.0\n   - name: junegunn/fzf@0.28.0\n   - name: suzuki-shunsuke/tfcmt@v3.0.0\n\n   You can omit the registry name if it is "standard".\n\n   $ aqua g cli/cli\n   - name: cli/cli@v2.2.0\n\n   With "-f" option, you can pass packages.\n\n   $ aqua g -f packages.txt # list of <registry name>,<package name>\n   - name: cli/cli@v2.2.0\n   - name: junegunn/fzf@0.28.0\n   - name: tfmigrator/cli@v0.2.1\n\n   $ cat packages.txt | aqua g -f -\n   - name: cli/cli@v2.2.0\n   - name: junegunn/fzf@0.28.0\n   - name: tfmigrator/cli@v0.2.1\n\n   $ aqua list | aqua g -f - # Generate configuration to install all packages\n\n   You can omit the registry name if it is "standard".\n\n   echo "cli/cli" | aqua g -f -\n   - name: cli/cli@v2.2.0\n\n   You can select a version interactively with "-s" option.\n   By default, aqua g -s will only display 30 versions of package.\n   Use --limit/-l to change it. Non-positive number refers to no limit.\n\n   # Display 30 versions of selected by default\n   $ aqua g -s\n   # Display all versions of selected package\n   $ aqua g -s -l -1\n   # Display 5 versions of selected package\n   $ aqua g -s -l 5\n\n   The option "-pin" is useful to prevent the package from being updated by Renovate.\n\n   $ aqua g -pin cli/cli\n   - name: cli/cli\n     version: v2.2.0\n\n   With -detail option, aqua outputs additional information such as description and link.\n\n   $ aqua g -detail cli/cli\n   - name: cli/cli@v2.2.0\n     description: GitHub\u2019s official command line tool\n     link: https://github.com/cli/cli\n\n   With -g option, aqua reads a first global configuration file.\n\n   $ aqua g -g cli/cli\n\n   You can add packages to a first global configuration file with -g and -i option.\n\n   $ aqua g -g -i cli/cli\n\n\nOPTIONS:\n   -f string             the file path of packages list. When the value is "-", the list is passed from the standard input\n   -i                    Insert packages to configuration file (default: false)\n   --pin                 Pin version (default: false)\n   -g                    Insert packages in a global configuration file (default: false)\n   --detail, -d          Output additional fields such as description and link (default: false) [$AQUA_GENERATE_WITH_DETAIL]\n   -o string             inserted file\n   --select-version, -s  Select the installed version interactively. Default to display 30 versions, use --limit/-l to change it. (default: false)\n   --limit int, -l int   The maximum number of versions. Non-positive number refers to no limit. (default: 30)\n   --help, -h            show help\n')),(0,i.yg)("h2",{id:"aqua-update-aqua"},"aqua update-aqua"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"$ aqua update-aqua --help\nNAME:\n   aqua update-aqua - Update aqua\n\nUSAGE:\n   aqua update-aqua\n\nDESCRIPTION:\n   Update aqua.\n\n   e.g.\n   $ aqua update-aqua [version]\n\n   aqua is installed in $AQUA_ROOT_DIR/bin.\n   By default the latest version of aqua is installed, but you can specify the version with argument.\n\n   e.g.\n   $ aqua update-aqua # Install the latest version\n   $ aqua update-aqua v1.20.0 # Install v1.20.0\n\n\nOPTIONS:\n   --help, -h  show help\n")),(0,i.yg)("h2",{id:"aqua-update-checksum"},"aqua update-checksum"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"$ aqua update-checksum --help\nNAME:\n   aqua update-checksum - Create or Update aqua-checksums.json\n\nUSAGE:\n   aqua update-checksum\n\nDESCRIPTION:\n   Create or Update aqua-checksums.json.\n\n   e.g.\n   $ aqua update-checksum\n\n   By default aqua doesn't update aqua-checksums.json of the global configuration.\n   If you want to update them too,\n   please set \"-a\" option.\n\n   $ aqua update-checksum -a\n\n   By default, aqua update-checksum doesn't remove existing checksums even if they aren't unused.\n   If -prune option is set, aqua unused checksums would be removed.\n\n   $ aqua update-checksum -prune\n\n\nOPTIONS:\n   --all, -a   Create or Update all aqua-checksums.json including global configuration (default: false)\n   --deep      This flag was deprecated and had no meaning from aqua v2.0.0. This flag will be removed in aqua v3.0.0. https://github.com/aquaproj/aqua/issues/1769 (default: false)\n   --prune     Remove unused checksums (default: false)\n   --help, -h  show help\n")),(0,i.yg)("h2",{id:"aqua-update"},"aqua update"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"$ aqua update --help\nNAME:\n   aqua update - Update registries and packages\n\nUSAGE:\n   aqua update\n\nDESCRIPTION:\n   Update registries and packages.\n   If no argument is passed, all registries and packages are updated to the latest.\n\n     # Update all packages and registries to the latest versions\n     $ aqua update\n\n   This command has an alias \"up\"\n\n     $ aqua up\n\n   This command gets the latest version from GitHub Releases, GitHub Tags, and crates.io and updates aqua.yaml.\n   This command doesn't update commit hashes.\n   This command doesn't install packages.\n   This command updates only a nearest aqua.yaml from the current directory.\n   If this command finds an aqua.yaml, it ignores other aqua.yaml including global configuration files ($AQUA_GLOBAL_CONFIG).\n\n   So if you want to update other files, please change the current directory or specify the configuration file path with the option '-c'.\n\n     $ aqua -c foo/aqua.yaml update\n\n   If you want to update only registries, please use the --only-registry [-r] option.\n\n     # Update only registries\n     $ aqua update -r\n\n   If you want to update only packages, please use the --only-package [-p] option.\n\n     # Update only packages\n     $ aqua update -p\n\n   If you want to update only specific packages, please use the -i option.\n   You can select packages with the fuzzy finder.\n   If -i option is used, registries aren't updated.\n\n     # Select updated packages with fuzzy finder\n     $ aqua update -i\n\n   If you want to select versions, please use the --select-version [-s] option.\n   You can select versions with the fuzzy finder. You can not only update but also downgrade packages.\n   By default, -s will only display 30 versions of package.\n   Use --limit/-l to change it. Non-positive number refers to no limit.\n\n     # Select updated packages and versions with fuzzy finder\n     # Display 30 versions by default\n     $ aqua update -i -s\n     # Display only 5 versions\n     $ aqua update -i -s -l 5\n     # Display all versions\n     $ aqua update -i -s -l -1\n\n   This command doesn't update packages if the field 'version' is used.\n\n     packages:\n       - name: cli/cli@v2.0.0 # Update\n       - name: gohugoio/hugo\n         version: v0.118.0 # Doesn't update\n\n   So if you don't want to update specific packages, the field 'version' is useful.\n\n   You can specify packages with command names. aqua finds packages that have these commands and updates them.\n\n     $ aqua update <command name> [<command name> ...]\n\n   e.g.\n\n     # Update cli/cli\n     $ aqua update gh\n\n   You can also specify a version.\n\n     $ aqua update gh@v2.30.0\n\n   You can also filter updated packages using package tags.\n\n   e.g.\n   $ aqua up -t foo # Install only packages having a tag \"foo\"\n   $ aqua up --exclude-tags foo # Install only packages not having a tag \"foo\"\n\n\nOPTIONS:\n   -i                        Select packages with fuzzy finder (default: false)\n   --select-version, -s      Select the version with fuzzy finder. Default to display 30 versions, use --limit/-l to change it. (default: false)\n   --only-registry, -r       Update only registries (default: false)\n   --only-package, -p        Update only packages (default: false)\n   --limit int, -l int       The maximum number of versions. Non-positive number refers to no limit. (default: 30)\n   --tags string, -t string  filter installed packages with tags\n   --exclude-tags string     exclude installed packages with tags\n   --help, -h                show help\n")),(0,i.yg)("h2",{id:"aqua-which"},"aqua which"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},'$ aqua which --help\nNAME:\n   aqua which - Output the absolute file path of the given command\n\nUSAGE:\n   aqua which <command name>\n\nDESCRIPTION:\n   Output the absolute file path of the given command\n   e.g.\n   $ aqua which gh\n   /home/foo/.aqua/pkgs/github_release/github.com/cli/cli/v2.4.0/gh_2.4.0_macOS_amd64.tar.gz/gh_2.4.0_macOS_amd64/bin/gh\n\n   If the command isn\'t found in the configuration files, aqua searches the command in the environment variable PATH\n\n   $ aqua which ls\n   /bin/ls\n\n   If the command isn\'t found, exits with non zero exit code.\n\n   $ aqua which foo\n   FATA[0000] aqua failed                                   aqua_version=0.8.6 error="command is not found" exe_name=foo program=aqua\n\n   If you want the package version, "--version" option is useful.\n\n   $ aqua which --version gh\n   v2.4.0\n\n\nOPTIONS:\n   --version, -v  Output the given package version (default: false)\n   --help, -h     show help\n')),(0,i.yg)("h2",{id:"aqua-info"},"aqua info"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"$ aqua info --help\nNAME:\n   aqua info - Show information\n\nUSAGE:\n   aqua info\n\nDESCRIPTION:\n   Show information.\n   e.g.\n   $ aqua info\n\nOPTIONS:\n   --help, -h  show help\n")),(0,i.yg)("h2",{id:"aqua-remove"},"aqua remove"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},'$ aqua remove --help\nNAME:\n   aqua remove - Uninstall packages\n\nUSAGE:\n   aqua remove [<registry name>,]<package name> [...]\n\nDESCRIPTION:\n   Uninstall packages.\n\n   e.g.\n   $ aqua rm --all\n   $ aqua rm cli/cli direnv/direnv tfcmt # Package names and command names\n\n   Note that this command remove files from AQUA_ROOT_DIR/pkgs, but doesn\'t remove packages from aqua.yaml and doesn\'t remove files from AQUA_ROOT_DIR/bin and AQUA_ROOT_DIR/bat.\n\n   If you want to uninstall packages of non standard registry, you need to specify the registry name too.\n\n   e.g.\n   $ aqua rm foo,suzuki-shunsuke/foo\n\n   By default, this command removes only packages from the pkgs directory and doesn\'t remove links from the bin directory.\n   You can change this behaviour by specifying the -mode flag.\n   The value of -mode is a string containing characters "l" and "p".\n   The order of the characters doesn\'t matter.\n\n   $ aqua rm -m l cli/cli # Remove only links\n   $ aqua rm -m pl cli/cli # Remove links and packages\n\n   Limitation:\n   "http" and "go_install" packages can\'t be removed.\n\n\nOPTIONS:\n   --all, -a                 uninstall all packages (default: false)\n   --mode string, -m string  Removed target modes. l: link, p: package [$AQUA_REMOVE_MODE]\n   -i                        Select packages with a Fuzzy Finder (default: false)\n   --help, -h                show help\n')),(0,i.yg)("h2",{id:"aqua-vacuum"},"aqua vacuum"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},'$ aqua vacuum --help\nNAME:\n   aqua vacuum - Remove unused installed packages\n\nUSAGE:\n   aqua vacuum\n\nDESCRIPTION:\n   Remove unused installed packages.\n\n   This command removes unused installed packages, which is useful to save storage and keep your machine clean.\n\n     $ aqua vacuum\n\n   It removes installed packages which haven\'t been used for over the expiration days.\n   The default expiration days is 60, but you can change it by the environment variable $AQUA_VACUUM_DAYS or the command line option "-days <expiration days>".\n\n   e.g.\n\n     $ export AQUA_VACUUM_DAYS=90\n\n     $ aqua vacuum -d 30\n\n   As of aqua v2.43.0, aqua records packages\' last used date times.\n   Date times are updated when packages are installed or executed.\n   Packages installed by aqua v2.42.2 or older don\'t have records of last used date times, so aqua can\'t remove them.\n   To solve the problem, "aqua vacuum --init" is available.\n\n     aqua vacuum --init\n\n   "aqua vacuum --init" searches installed packages from aqua.yaml including $AQUA_GLOBAL_CONFIG and records the current date time as the last used date time of those packages if their last used date times aren\'t recorded.\n\n   "aqua vacuum --init" can\'t record date times of install packages which are not found in aqua.yaml.\n   If you want to record their date times, you need to remove them by "aqua rm" command and re-install them.\n\n\nOPTIONS:\n   --init              Create timestamp files. (default: false)\n   --days int, -d int  Expiration days (default: 60) [$AQUA_VACUUM_DAYS]\n   --help, -h          show help\n')),(0,i.yg)("h2",{id:"aqua-token"},"aqua token"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"$ aqua token --help\nNAME:\n   aqua token - Manage GitHub Access token\n\nUSAGE:\n   aqua token [command [command options]]\n\nDESCRIPTION:\n   Manage GitHub Access token by keyring.\n\nCOMMANDS:\n   set         Set GitHub Access token\n   remove, rm  Remove GitHub Access token\n\nOPTIONS:\n   --help, -h  show help\n")),(0,i.yg)("h3",{id:"token-set"},"token set"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"$ token set --help\nNAME:\n   aqua token set - Set GitHub Access token\n\nUSAGE:\n   aqua token set\n\nDESCRIPTION:\n   Set GitHub Access token to keyring.\n\nOPTIONS:\n   --stdin     Read GitHub Access token from stdin (default: false)\n   --help, -h  show help\n")),(0,i.yg)("h3",{id:"token-remove"},"token remove"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"$ token remove --help\nNAME:\n   aqua token remove - Remove GitHub Access token\n\nUSAGE:\n   aqua token remove\n\nDESCRIPTION:\n   Remove GitHub Access token from keyring.\n\nOPTIONS:\n   --help, -h  show help\n")),(0,i.yg)("h2",{id:"aqua-cp"},"aqua cp"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},'$ aqua cp --help\nNAME:\n   aqua cp - Copy executable files in a directory\n\nUSAGE:\n   aqua cp <command name> [<command name> ...]\n\nDESCRIPTION:\n   Copy executable files in a directory.\n\n   e.g.\n   $ aqua cp gh\n   $ ls dist\n   gh\n\n   You can specify the target directory by -o option.\n\n   $ aqua cp -o ~/bin terraform hugo\n\n   If you don\'t specify commands, all commands are copied.\n\n   $ aqua cp\n\n   You can also copy global configuration files\' commands with "-a" option.\n\n   $ aqua cp -a\n\n   You can filter copied commands with package tags.\n\n   e.g.\n   $ aqua cp -t foo # Copy only packages having a tag "foo"\n   $ aqua cp --exclude-tags foo # Copy only packages not having a tag "foo"\n\n\nOPTIONS:\n   -o string                 destination directory (default: "dist")\n   --all, -a                 install all aqua configuration packages (default: false)\n   --tags string, -t string  filter installed packages with tags\n   --exclude-tags string     exclude installed packages with tags\n   --help, -h                show help\n')),(0,i.yg)("h2",{id:"aqua-policy"},"aqua policy"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"$ aqua policy --help\nNAME:\n   aqua policy - Manage Policy\n\nUSAGE:\n   aqua policy [command [command options]]\n\nCOMMANDS:\n   allow  Allow a policy file\n   deny   Deny a policy file\n   init   Create a policy file if it doesn't exist\n\nOPTIONS:\n   --help, -h  show help\n")),(0,i.yg)("h3",{id:"policy-allow"},"policy allow"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"$ policy allow --help\nNAME:\n   aqua policy allow - Allow a policy file\n\nUSAGE:\n   aqua policy allow\n\nDESCRIPTION:\n   Allow a policy file\n   e.g.\n   $ aqua policy allow [<policy file path>]\n\n\nOPTIONS:\n   --help, -h  show help\n")),(0,i.yg)("h3",{id:"policy-deny"},"policy deny"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"$ policy deny --help\nNAME:\n   aqua policy deny - Deny a policy file\n\nUSAGE:\n   aqua policy deny\n\nDESCRIPTION:\n   Deny a policy file\n   e.g.\n   $ aqua policy deny [<policy file path>]\n\n\nOPTIONS:\n   --help, -h  show help\n")),(0,i.yg)("h3",{id:"policy-init"},"policy init"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},'$ policy init --help\nNAME:\n   aqua policy init - Create a policy file if it doesn\'t exist\n\nUSAGE:\n   aqua policy init [<created file path. The default value is "aqua-policy.yaml">]\n\nDESCRIPTION:\n   Create a policy file if it doesn\'t exist\n   e.g.\n   $ aqua policy init # create "aqua-policy.yaml"\n   $ aqua policy init foo.yaml # create foo.yaml\n\nOPTIONS:\n   --help, -h  show help\n')),(0,i.yg)("h2",{id:"aqua-init-policy"},"aqua init-policy"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},'$ aqua init-policy --help\nNAME:\n   aqua init-policy - [Deprecated] Create a policy file if it doesn\'t exist\n\nUSAGE:\n   aqua init-policy [<created file path. The default value is "aqua-policy.yaml">]\n\nDESCRIPTION:\n   [Deprecated] Create a policy file if it doesn\'t exist\n\n   Please use "aqua policy init" command instead.\n\n   e.g.\n   $ aqua init-policy # create "aqua-policy.yaml"\n   $ aqua init-policy foo.yaml # create foo.yaml\n\nOPTIONS:\n   --help, -h  show help\n')),(0,i.yg)("h2",{id:"aqua-exec"},"aqua exec"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},'$ aqua exec --help\nNAME:\n   aqua exec - Execute tool\n\nUSAGE:\n   aqua exec <executed command> [<arg> ...]\n\nDESCRIPTION:\n   Basically you don\'t have to use this command, because this is used by aqua internally. aqua-proxy invokes this command.\n   When you execute the command installed by aqua, "aqua exec" is executed internally.\n\n   e.g.\n   $ aqua exec -- gh version\n   gh version 2.4.0 (2021-12-21)\n   https://github.com/cli/cli/releases/tag/v2.4.0\n\nOPTIONS:\n   --help, -h  show help\n')),(0,i.yg)("h2",{id:"aqua-list"},"aqua list"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"$ aqua list --help\nNAME:\n   aqua list - List packages in Registries\n\nUSAGE:\n   aqua list\n\nDESCRIPTION:\n   Output the list of packages in registries.\n   The output format is <registry name>,<package name>\n\n   e.g.\n   $ aqua list\n   standard,99designs/aws-vault\n   standard,abiosoft/colima\n   standard,abs-lang/abs\n   ...\n\n   If the option -installed is set, the command lists only installed packages.\n\n   $ aqua list -installed\n   standard,golangci/golangci-lint,v1.56.2\n   standard,goreleaser/goreleaser,v1.24.0\n   ...\n\n   By default, the command doesn't list global configuration packages.\n   If you want to list global configuration packages too, please set the option -a.\n\n   $ aqua list -installed -a\n\n\nOPTIONS:\n   --installed, -i  List installed packages (default: false)\n   --all, -a        List global configuration packages too (default: false)\n   --help, -h       show help\n")),(0,i.yg)("h2",{id:"aqua-generate-registry"},"aqua generate-registry"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"$ aqua generate-registry --help\nNAME:\n   aqua generate-registry - Generate a registry's package configuration\n\nUSAGE:\n   aqua generate-registry <package name>\n\nDESCRIPTION:\n   Generate a template of Registry package configuration.\n\n   Note that you probably fix the generate code manually.\n   The generate code is not perfect and may include the wrong configuration.\n   It is just a template.\n\n   e.g.\n\n   $ aqua gr cli/cli # Outputs the configuration.\n   packages:\n     - type: github_release\n       repo_owner: cli\n       repo_name: cli\n       asset: gh_{{trimV .Version}}_{{.OS}}_{{.Arch}}.{{.Format}}\n       format: tar.gz\n       description: GitHub\u2019s official command line tool\n       replacements:\n         darwin: macOS\n       overrides:\n         - goos: windows\n           format: zip\n       supported_envs:\n         - darwin\n         - linux\n         - amd64\n       rosetta2: true\n\n   By default, aqua gets the information from the latest GitHub Releases.\n   You can specify a specific package version.\n\n   e.g.\n\n   $ aqua gr cli/cli@v2.0.0\n\n   By default, aqua gr gets all GitHub Releases to generate version_overrides.\n   You can limit the number of GitHub Releases by --limit.\n\n   e.g.\n\n   $ aqua gr --limit 100 suzuki-shunsuke/tfcmt\n\n   If --out-testdata is set, aqua inserts testdata into the specified file.\n\n   e.g.\n\n   $ aqua gr --out-testdata testdata.yaml suzuki-shunsuke/tfcmt\n\n   If -cmd is set, aqua sets files.\n\n   e.g.\n\n   $ aqua gr -cmd gh cli/cli\n\n     files:\n       - name: gh\n\n   You can specify multiple commands with commas \",\".\n\n   e.g.\n\n   $ aqua gr -cmd age,age-keygen FiloSottile/age\n\n     files:\n       - name: age\n       - name: age-keygen\n\n\nOPTIONS:\n   --out-testdata string                A file path where the testdata is outputted\n   --cmd string                         A list of commands joined with commas ','\n   --generate-config string, -c string  A configuration file path\n   --limit int, -l int                  the maximum number of versions (default: 0)\n   --deep                               This flag was deprecated and had no meaning from aqua v2.15.0. This flag will be removed in aqua v3.0.0. https://github.com/aquaproj/aqua/issues/2351 (default: false)\n   --init                               Generate a configuration file (default: false)\n   --help, -h                           show help\n")),(0,i.yg)("h2",{id:"aqua-root-dir"},"aqua root-dir"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},'$ aqua root-dir --help\nNAME:\n   aqua root-dir - Output the aqua root directory (AQUA_ROOT_DIR)\n\nUSAGE:\n   aqua root-dir\n\nDESCRIPTION:\n   Output the aqua root directory (AQUA_ROOT_DIR)\n   e.g.\n\n   $ aqua root-dir\n   /home/foo/.local/share/aquaproj-aqua\n\n   $ export "PATH=$(aqua root-dir)/bin:PATH"\n\n\nOPTIONS:\n   --help, -h  show help\n')),(0,i.yg)("h2",{id:"aqua-version"},"aqua version"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"$ aqua version --help\nNAME:\n   aqua version - Show version\n\nUSAGE:\n   aqua version\n\nOPTIONS:\n   --json, -j  Output version in JSON format (default: false)\n   --help, -h  show help\n")),(0,i.yg)("h2",{id:"aqua-completion"},"aqua completion"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"$ aqua completion --help\nNAME:\n   aqua completion - Output shell completion script for bash, zsh, fish, or Powershell\n\nUSAGE:\n   aqua completion\n\nDESCRIPTION:\n   Output shell completion script for bash, zsh, fish, or Powershell.\n   Source the output to enable completion.\n\n   # .bashrc\n   source <(aqua completion bash)\n\n   # .zshrc\n   source <(aqua completion zsh)\n\n   # fish\n   aqua completion fish > ~/.config/fish/completions/aqua.fish\n\n   # Powershell\n   Output the script to path/to/autocomplete/aqua.ps1 an run it.\n\n\nOPTIONS:\n   --help, -h  show help\n")))}d.isMDXComponent=!0},5680:(a,e,n)=>{n.d(e,{xA:()=>c,yg:()=>h});var t=n(6540);function i(a,e,n){return e in a?Object.defineProperty(a,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):a[e]=n,a}function o(a,e){var n=Object.keys(a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(a);e&&(t=t.filter(function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable})),n.push.apply(n,t)}return n}function l(a){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach(function(e){i(a,e,n[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach(function(e){Object.defineProperty(a,e,Object.getOwnPropertyDescriptor(n,e))})}return a}function s(a,e){if(null==a)return{};var n,t,i=function(a,e){if(null==a)return{};var n,t,i={},o=Object.keys(a);for(t=0;t<o.length;t++)n=o[t],e.indexOf(n)>=0||(i[n]=a[n]);return i}(a,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(a);for(t=0;t<o.length;t++)n=o[t],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(a,n)&&(i[n]=a[n])}return i}var u=t.createContext({}),r=function(a){var e=t.useContext(u),n=e;return a&&(n="function"==typeof a?a(e):l(l({},e),a)),n},c=function(a){var e=r(a.components);return t.createElement(u.Provider,{value:e},a.children)},p="mdxType",d={inlineCode:"code",wrapper:function(a){var e=a.children;return t.createElement(t.Fragment,{},e)}},g=t.forwardRef(function(a,e){var n=a.components,i=a.mdxType,o=a.originalType,u=a.parentName,c=s(a,["components","mdxType","originalType","parentName"]),p=r(n),g=i,h=p["".concat(u,".").concat(g)]||p[g]||d[g]||o;return n?t.createElement(h,l(l({ref:e},c),{},{components:n})):t.createElement(h,l({ref:e},c))});function h(a,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof a||i){var o=n.length,l=new Array(o);l[0]=g;var s={};for(var u in e)hasOwnProperty.call(e,u)&&(s[u]=e[u]);s.originalType=a,s[p]="string"==typeof a?a:i,l[1]=s;for(var r=2;r<o;r++)l[r]=n[r];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}g.displayName="MDXCreateElement"}}]);