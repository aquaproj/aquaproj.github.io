"use strict";(self.webpackChunkaqua_docusaurus=self.webpackChunkaqua_docusaurus||[]).push([[9786],{5680:(e,a,n)=>{n.d(a,{xA:()=>c,yg:()=>g});var r=n(6540);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,r,t=function(e,a){if(null==e)return{};var n,r,t={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var u=r.createContext({}),l=function(e){var a=r.useContext(u),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},c=function(e){var a=l(e.components);return r.createElement(u.Provider,{value:a},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},d=r.forwardRef((function(e,a){var n=e.components,t=e.mdxType,i=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=l(n),d=t,g=p["".concat(u,".").concat(d)]||p[d]||m[d]||i;return n?r.createElement(g,o(o({ref:a},c),{},{components:n})):r.createElement(g,o({ref:a},c))}));function g(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var u in a)hasOwnProperty.call(a,u)&&(s[u]=a[u]);s.originalType=e,s[p]="string"==typeof e?e:t,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},997:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>u,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=n(8168),t=(n(6540),n(5680));const i={sidebar_position:800},o="Wrap aqua with task runner such as GNU Make",s={unversionedId:"guides/wrap-aqua-with-task-runner",id:"guides/wrap-aqua-with-task-runner",title:"Wrap aqua with task runner such as GNU Make",description:"aqua is easy to use, but generally speaking it is not easy to introduce a new tool and let developers install it in a large team and organization.",source:"@site/docs/guides/wrap-aqua-with-task-runner.md",sourceDirName:"guides",slug:"/guides/wrap-aqua-with-task-runner",permalink:"/docs/guides/wrap-aqua-with-task-runner",draft:!1,editUrl:"https://github.com/aquaproj/aquaproj.github.io/edit/main/docs/guides/wrap-aqua-with-task-runner.md",tags:[],version:"current",sidebarPosition:800,frontMatter:{sidebar_position:800},sidebar:"tutorialSidebar",previous:{title:"Build Container (Docker) Image",permalink:"/docs/guides/build-container-image"},next:{title:"Develop a Registry",permalink:"/docs/develop-registry/"}},u={},l=[{value:"Example",id:"example",level:2}],c={toc:l},p="wrapper";function m(e){let{components:a,...n}=e;return(0,t.yg)(p,(0,r.A)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"wrap-aqua-with-task-runner-such-as-gnu-make"},"Wrap aqua with task runner such as GNU Make"),(0,t.yg)("p",null,"aqua is ",(0,t.yg)("a",{parentName:"p",href:"/docs/#easy-to-use"},"easy to use"),", but generally speaking it is not easy to introduce a new tool and let developers install it in a large team and organization."),(0,t.yg)("p",null,"By wrapping aqua with a task runner such as ",(0,t.yg)("a",{parentName:"p",href:"https://www.gnu.org/software/make/"},"GNU Make")," and ",(0,t.yg)("a",{parentName:"p",href:"https://taskfile.dev/"},"Task"),", you may be able to solve the issue.\nIf a task runner is already used in your project, it's easy to introduce aqua.\nBy hiding the setup of aqua (installing aqua, adding ",(0,t.yg)("inlineCode",{parentName:"p"},"PATH"),", and running ",(0,t.yg)("inlineCode",{parentName:"p"},"aqua i [-l]"),") from developers using task runner,\ndevelopers don't have to aware of aqua."),(0,t.yg)("h2",{id:"example"},"Example"),(0,t.yg)("admonition",{type:"caution"},(0,t.yg)("p",{parentName:"admonition"},"We aren't familiar with GNU Make and Task. So the example code of Makefile and Taskfile.yml may not be good.\nAnd this example doesn't work in Windows.\nYour contribution is welcome.")),(0,t.yg)("p",null,(0,t.yg)("a",{parentName:"p",href:"https://github.com/suzuki-shunsuke/poc-aqua-make"},"https://github.com/suzuki-shunsuke/poc-aqua-make")),(0,t.yg)("p",null,"In this example, Terraform is managed by aqua and developers can run ",(0,t.yg)("inlineCode",{parentName:"p"},"terraform")," via GNU Make or Task without awareness of aqua."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-console"},"$ make tf-init\n")),(0,t.yg)("details",null,(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-console"},'$ make tf-init\nbash scripts/setup_aqua.sh\naqua-installer: OK\n===> Installing aqua v2.2.3 for bootstrapping...\n===> Downloading https://github.com/aquaproj/aqua/releases/download/v2.2.3/aqua_linux_arm64.tar.gz ...\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n100 5817k  100 5817k    0     0  5765k      0  0:00:01  0:00:01 --:--:-- 26.6M\n===> Verifying checksum of aqua v2.2.3 ...\naqua_linux_arm64.tar.gz: OK\n===> /tmp/tmp.hlehkM/aqua update-aqua\nINFO[0000] download and unarchive the package            aqua_version=2.2.3 env=linux/arm64 new_version=v2.6.0 package_name=aquaproj/aqua package_version=v2.6.0 program=aqua registry=\nINFO[0001] verify a package with slsa-verifier           aqua_version=2.2.3 env=linux/arm64 new_version=v2.6.0 package_name=aquaproj/aqua package_version=v2.6.0 program=aqua registry=\nINFO[0001] download and unarchive the package            aqua_version=2.2.3 env=linux/arm64 new_version=v2.6.0 package_name=slsa-framework/slsa-verifier package_version=v2.1.0 program=aqua registry=\nVerified signature against tlog entry index 20223381 at URL: https://rekor.sigstore.dev/api/v1/log/entries/24296fb24b8ad77a607c980c833eb73f84b6461d7932b893a0cc206bd8289cf74c92137efedf66c6\nVerified build using builder https://github.com/slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@refs/tags/v1.5.0 at commit 903d205f6876aba423f753613ff01bbf97216c00\nVerifying artifact /tmp/467478560: PASSED\n\nPASSED: Verified SLSA provenance\nINFO[0010] create a symbolic link                        aqua_version=2.2.3 command=aqua env=linux/arm64 new_version=v2.6.0 package_name=aquaproj/aqua package_version=v2.6.0 program=aqua\naqua version 2.6.0 (903d205f6876aba423f753613ff01bbf97216c00)\n/workspace\nINFO[0000] download and unarchive the package            aqua_version=2.6.0 env=linux/arm64 package_name=aqua-proxy package_version=v1.2.0 program=aqua registry=\nINFO[0000] create a symbolic link                        aqua_version=2.6.0 command=aqua-proxy env=linux/arm64 package_name=aqua-proxy package_version=v1.2.0 program=aqua registry=\nINFO[0001] create a symbolic link                        aqua_version=2.6.0 command=task env=linux/arm64 program=aqua\nINFO[0001] create a symbolic link                        aqua_version=2.6.0 command=terraform env=linux/arm64 program=aqua\nterraform init\nINFO[0000] download and unarchive the package            aqua_version=2.6.0 env=linux/arm64 exe_name=terraform package=hashicorp/terraform package_name=hashicorp/terraform package_version=v1.4.6 program=aqua registry=standard\n\nInitializing the backend...\n\nInitializing provider plugins...\n- Finding latest version of hashicorp/null...\n- Installing hashicorp/null v3.2.1...\n- Installed hashicorp/null v3.2.1 (signed by HashiCorp)\n\nTerraform has created a lock file .terraform.lock.hcl to record the provider\nselections it made above. Include this file in your version control repository\nso that Terraform can guarantee to make the same selections by default when\nyou run "terraform init" in the future.\n\nTerraform has been successfully initialized!\n\nYou may now begin working with Terraform. Try running "terraform plan" to see\nany changes that are required for your infrastructure. All Terraform commands\nshould now work.\n\nIf you ever set or change modules or backend configuration for Terraform,\nrerun this command to reinitialize your working directory. If you forget, other\ncommands will detect it and remind you to do so if necessary.\n'))),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-console"},"$ task tf-init\n")),(0,t.yg)("details",null,(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-console"},'$ task tf-init\ntask: [setup-aqua] bash scripts/setup_aqua.sh\ntask: [tf-init] terraform init\n\nInitializing the backend...\n\nInitializing provider plugins...\n- Reusing previous version of hashicorp/null from the dependency lock file\n- Installing hashicorp/null v3.2.1...\n- Installed hashicorp/null v3.2.1 (signed by HashiCorp)\n\nTerraform has made some changes to the provider dependency selections recorded\nin the .terraform.lock.hcl file. Review those changes and commit them to your\nversion control system if they represent changes you intended to make.\n\nTerraform has been successfully initialized!\n\nYou may now begin working with Terraform. Try running "terraform plan" to see\nany changes that are required for your infrastructure. All Terraform commands\nshould now work.\n\nIf you ever set or change modules or backend configuration for Terraform,\nrerun this command to reinitialize your working directory. If you forget, other\ncommands will detect it and remind you to do so if necessary.\n'))),(0,t.yg)("p",null,"Directory structure"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre"},"Makefile or Taskfile.yml\nscripts/\n  setup_aqua.sh\n")),(0,t.yg)("p",null,"setup_aqua.sh"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-bash"},'#!/usr/bin/env bash\n\nset -eu\nset -o pipefail\n\nif command -v aqua > /dev/null 2>&1; then\n  exit 0\nfi\n\ntempdir=$(mktemp -d)\ncd "$tempdir"\ncurl -sSfL -O https://raw.githubusercontent.com/aquaproj/aqua-installer/v3.0.1/aqua-installer\necho "fb4b3b7d026e5aba1fc478c268e8fbd653e01404c8a8c6284fdba88ae62eda6a  aqua-installer" | sha256sum -c\nchmod +x aqua-installer\n\n./aqua-installer\ncd -\n\nrm -R "$tempdir"\n\naqua i -l\n')),(0,t.yg)("p",null,"Makefile"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-makefile"},"ifeq ($(AQUA_ROOT_DIR),)\nifeq ($(XDG_DATA_HOME),)\n    AQUA_ROOT_DIR := $(HOME)/.local/share/aquaproj-aqua\nelse\n    AQUA_ROOT_DIR := $(XDG_DATA_HOME)/aquaproj-aqua\nendif\nendif\n\nPATH := $(AQUA_ROOT_DIR)/bin:$(PATH)\n\n.PHONY: setup-aqua\nsetup-aqua:\n    bash scripts/setup_aqua.sh\n\n.PHONY: tf-init\ntf-init: setup-aqua\n    terraform init\n")),(0,t.yg)("p",null,"Taskfile.yml"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'version: \'3\'\n\nvars:\n  AQUA_ROOT_DIR:\n    sh: echo "${AQUA_ROOT_DIR:-${XDG_DATA_HOME:-$HOME/.local/share}/aquaproj-aqua}"\n\nenv:\n  PATH: "{{.AQUA_ROOT_DIR}}/bin:{{.PATH}}"\n\ntasks:\n  tf-init:\n    deps: [setup-aqua]\n    cmds:\n      - terraform init\n\n  setup-aqua:\n    cmds:\n      - bash scripts/setup_aqua.sh\n')))}m.isMDXComponent=!0}}]);